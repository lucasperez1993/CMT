/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cirugia;

import Conexion.Conexion;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author djaime
 */
public class DialogoBuscarPractica extends javax.swing.JDialog {

    DialogoImagenPractica dialogoImagenPractica;
    ControladorCirugia controlador;
    JSONObject json;
    /**
     * Creates new form dialogoPractica
     */
    public static ArrayList<String> listaPractica = new ArrayList<>();
    
    public DialogoBuscarPractica(java.awt.Frame parent, boolean modal, ControladorCirugia controlador, DialogoImagenPractica dialogoImagenPractica) {
        super(parent, modal);
        this.controlador = controlador;
        initComponents();
        this.dialogoImagenPractica = dialogoImagenPractica;
        precargaPractica();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textPractica = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        labelNombre = new javax.swing.JLabel();
        labelNivel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        textPractica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textPracticaActionPerformed(evt);
            }
        });
        textPractica.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textPracticaKeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton2.setText("Agregar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        labelNombre.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelNombre.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNombre.setText("-");

        labelNivel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelNivel.setText("-");

        jLabel1.setText("Codigo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelNombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textPractica, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textPractica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelNivel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static void precargaPractica(){
        listaPractica.add("080506");listaPractica.add("080107");listaPractica.add("080101");listaPractica.add("060117");
        listaPractica.add("060101");listaPractica.add("050436");listaPractica.add("050435");listaPractica.add("050430");
        listaPractica.add("050421");listaPractica.add("050420");listaPractica.add("050418");listaPractica.add("050417");
        listaPractica.add("050401");listaPractica.add("050304");listaPractica.add("050206");listaPractica.add("050110");
        listaPractica.add("050101");listaPractica.add("040301");listaPractica.add("040102");listaPractica.add("030901");
        listaPractica.add("030705");listaPractica.add("030601");listaPractica.add("030524");listaPractica.add("030531");
        listaPractica.add("030305");listaPractica.add("100204");listaPractica.add("100201");listaPractica.add("100117");
        listaPractica.add("100111");listaPractica.add("090114");listaPractica.add("080801");listaPractica.add("080732");
        listaPractica.add("080701");listaPractica.add("080534");listaPractica.add("080532");listaPractica.add("080515");
        listaPractica.add("080516");listaPractica.add("080514");listaPractica.add("080509");listaPractica.add("130205");
        listaPractica.add("130518");listaPractica.add("130217");listaPractica.add("130216");listaPractica.add("110202");
        listaPractica.add("101107");listaPractica.add("101106");listaPractica.add("101104");listaPractica.add("100701");
        listaPractica.add("100401");listaPractica.add("100307");listaPractica.add("100215");listaPractica.add("100205");
    }
    private void textPracticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textPracticaActionPerformed

    }//GEN-LAST:event_textPracticaActionPerformed

    public static void requiereAnatomia(String practica){
        precargaPractica();
        for (int i = 0; i < listaPractica.size(); i++) {
            int p1 = Integer.valueOf(practica);
            int p2 = Integer.valueOf(listaPractica.get(i));
            if(p1 == p2){
                JOptionPane.showMessageDialog(null, "Requiere anatomia patologica", "Mensaje del sistema", JOptionPane.WARNING_MESSAGE);
                break;
            }
        }
    }
    
    public static String getRequiereAnatomia(String practica){
        precargaPractica();
        String requiere = "NO";
        for (int i = 0; i < listaPractica.size(); i++) {
            int p1 = Integer.valueOf(practica);
            int p2 = Integer.valueOf(listaPractica.get(i));
            if(p1 == p2){
                requiere = "SI";
                break;
            }
        }
        return requiere;
    }
    
    private void textPracticaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPracticaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Conexion conection = new Conexion();
        try {
            json = SqlCirugia.getReglaOsNomencladorV2(textPractica.getText(), conection.GetConnection5());
            if (json.getBoolean("resultado")) {
                labelNombre.setText(json.getString("nombre"));
                labelNivel.setText("NIVEL: " + json.getString("nivel"));
                requiereAnatomia(textPractica.getText());
            } else {
                JOptionPane.showMessageDialog(null, "No existe la practica", "Mensaje del sistema", JOptionPane.WARNING_MESSAGE);
            }
        } catch (JSONException ex) {
            Logger.getLogger(ControladorCirugia.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
                try {
                    conection.GetConnection5().close();
                } catch (SQLException ex) {
                    Logger.getLogger(DialogoBuscarPractica.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        }
    }//GEN-LAST:event_textPracticaKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(json != null){
            try {
                controlador.agregarPracticaMedicoAyudante(json);
                controlador.modificarTipoPractica(Integer.valueOf(textPractica.getText()));
                this.dialogoImagenPractica.cargarTabla();
                this.dispose();
            } catch (JSONException ex) {}
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel labelNivel;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JTextField textPractica;
    // End of variables declaration//GEN-END:variables
}
