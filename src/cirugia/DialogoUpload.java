/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cirugia;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import objeto.jdb_cirugiapractica;
import objeto.jdb_documento;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.rendering.ImageType;
import org.apache.pdfbox.rendering.PDFRenderer;

/**
 *
 * @author djaime
 */
public class DialogoUpload extends javax.swing.JDialog {

    private int matricula = 0;
    private String practica = "";
    private String cuil = "";

    jdb_cirugiapractica cirugiapractica;
    Connection connection;
    String path_default;

    /**
     * Creates new form DialogoUpload
     */
    public DialogoUpload(java.awt.Frame parent, boolean modal, jdb_cirugiapractica cirugiapractica, int matricula, String cuil, String practica, String path_default, Connection connection) {
        super(parent, modal);
        initComponents();
        this.cirugiapractica = cirugiapractica;
        this.matricula = matricula;
        this.cuil = cuil;
        this.practica = practica;
        this.connection = connection;
        this.path_default = path_default;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboTipoIMG = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        comboTipoIMG.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pedido", "Protocolo", "HC", "Otro" }));

        jButton1.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton1.setText("Buscar Imagen");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        jButton3.setText("Convertir PDF");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboTipoIMG, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboTipoIMG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            filechoserImagen();
        } catch (IOException ex) {
            Logger.getLogger(DialogoUpload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            filechoserPDF();
        } catch (IOException ex) {
            Logger.getLogger(DialogoUpload.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void filechoserImagen() throws IOException {
        JFileChooser fileChooser = new JFileChooser(path_default);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Imagen", "png", "jpg", "jpeg"));
        int resultado = fileChooser.showSaveDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoOrigen = fileChooser.getSelectedFile();
            String documento = cuil + comboTipoIMG.getSelectedItem() + ".png";
            guardarImagen(false, null, archivoOrigen, documento);
            JOptionPane.showMessageDialog(this, "Imagen copiada exitosamente");
        }
    }
    
    private void filechoserPDF() throws IOException {
        JFileChooser fileChooser = new JFileChooser(path_default);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de Imagen", "pdf"));
        int resultado = fileChooser.showSaveDialog(this);
        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoOrigen = fileChooser.getSelectedFile();
            convertPDF(archivoOrigen);
            JOptionPane.showMessageDialog(this, "Imagen copiada exitosamente");
        }
    }
    
    private void convertPDF(File archivoOrigen) throws IOException {
        try {
            //String pdfFilePath = "D:\\CIRUGIA_MESA_DE_AYUDA\\GONZALEZ LOURDES PROTOCOLO.pdf";
            //PDDocument document = PDDocument.load(new File(pdfFilePath));
            PDDocument document = PDDocument.load(archivoOrigen);
            PDFRenderer pdfRenderer = new PDFRenderer(document);
            for (int pageIndex = 0; pageIndex < document.getNumberOfPages(); pageIndex++) {
                BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 300, ImageType.RGB);
                String documento = cuil + comboTipoIMG.getSelectedItem() +"_" + (pageIndex + 1) + ".png";
                guardarImagen(true, image, null, documento);
            }
            document.close();

            System.out.println("Conversión de PDF a imágenes completada.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void guardarImagen(boolean isPDF, BufferedImage image, File archivoOrigen, String documento) throws IOException {
        String contenttype = "image/png";
        String extension = "png";
        //String rutaDestino ="D:\\CIRUGIA_MESA_DE_AYUDA\\";
        String rutaDestino = "\\\\Ibm3300\\cirugia_mesa_de_ayuda\\";
        String carpeta = rutaDestino + "/" + cirugiapractica.periodo;
        Path pathCarpeta = Paths.get(carpeta);
        if (!Files.exists(pathCarpeta)) {
            Files.createDirectory(pathCarpeta);
        }

        String sub_carpeta_matricula = pathCarpeta + "/" + matricula;
        Path pathSubCarpeta_matricula = Paths.get(sub_carpeta_matricula);
        if (!Files.exists(pathSubCarpeta_matricula)) {
            Files.createDirectory(pathSubCarpeta_matricula);
        }

        String sub_carpeta_matricula_cuil = sub_carpeta_matricula + "/" + cuil;
        Path pathSubCarpeta_matricula_cuil = Paths.get(sub_carpeta_matricula_cuil);
        if (!Files.exists(pathSubCarpeta_matricula_cuil)) {
            Files.createDirectory(pathSubCarpeta_matricula_cuil);
        }
        
        String path_img = pathSubCarpeta_matricula_cuil + "/" + documento;
        try {
            if(isPDF){
                //String outputImagePath = "D:\\CIRUGIA_MESA_DE_AYUDA\\" + (pageIndex + 1) + ".png";
                ImageIO.write(image, "PNG", new File(path_img));
            }else{
                copiarArchivo(archivoOrigen, new File(path_img));
            }
            int tipo = getTipoPorNombreDocumento(comboTipoIMG.getSelectedItem().toString());
            //JSONObject json = SqlCirugia.getIddocumento(cirugiapractica.idcirugiapractica, tipo, connection);
            //long idtipodocumento = json.getLong("iddocumento");
            //String nombreDocumento = json.getString("documento");
            jdb_documento doc = jdb_documento.prepareDocumento(
                    cirugiapractica.idusuario,
                    cirugiapractica.idcirugiapractica,
                    contenttype,
                    extension,
                    comboTipoIMG.getSelectedItem().toString(),
                    documento,
                    pathSubCarpeta_matricula_cuil + "/",
                    tipo,
                    cirugiapractica.codme);
            //if (idtipodocumento == 0) {
                doc.createDocumento(doc, connection);
            //} else {
                //File archivo = new File(pathSubCarpeta_matricula_cuil + "/" + nombreDocumento);
                //archivo.delete();
            //    doc.iddocumento = idtipodocumento;
            //    jdb_documento.modificarDocumento(doc, connection);
            //}
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al copiar la imagen", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    public int getTipoPorNombreDocumento(String tipoDocumento) {
        int tipo = 0;
        switch (tipoDocumento) {
            case ControladorCirugia.PEDIDO:
                tipo = 1;
                break;
            case ControladorCirugia.PROTOCOLO:
                tipo = 2;
                break;
            case ControladorCirugia.HC:
                tipo = 3;
                break;
            case ControladorCirugia.OTRO:
                tipo = 4;
                break;
        }
        return tipo;
    }

    private void copiarArchivo(File origen, File destino) throws IOException {
        InputStream in = new FileInputStream(origen);
        OutputStream out = new FileOutputStream(destino);
        byte[] buffer = new byte[1024];
        int longitud;
        while ((longitud = in.read(buffer)) > 0) {
            out.write(buffer, 0, longitud);
        }
        in.close();
        out.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboTipoIMG;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    // End of variables declaration//GEN-END:variables
}
