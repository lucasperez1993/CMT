/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cirugia;

import Models.ModelImg;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import java.awt.*;
import javax.swing.JOptionPane;

/**
 *
 * @author djaime
 */
public class DialogoImagen extends javax.swing.JDialog {

    /**
     * Creates new form DialogoImagen
     */
    ControladorCirugia controlador;
    JSONArray listaDocumentos;

    public DialogoImagen(java.awt.Frame parent, boolean modal, ControladorCirugia controlador) {
        super(parent, modal);
        this.controlador = controlador;
        initComponents();
        cargarTabla();
    }
    
    public void cargarTabla(){
        try {
            listaDocumentos = controlador.getListaDOcumentos();
            jTable1.setModel(new ModelImg(listaDocumentos));
            botonDescarga.setEnabled(listaDocumentos.length() > 0);
        } catch (SQLException ex) {
            Logger.getLogger(DialogoImagen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        botonQuitar = new javax.swing.JButton();
        labelImagen = new javax.swing.JLabel();
        botonDescarga = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton2.setText("Volver");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        botonQuitar.setText("Quitar");
        botonQuitar.setEnabled(false);
        botonQuitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonQuitarActionPerformed(evt);
            }
        });

        labelImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png"))); // NOI18N

        botonDescarga.setFont(new java.awt.Font("Dialog", 1, 10)); // NOI18N
        botonDescarga.setText("Descargar");
        botonDescarga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDescargaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelImagen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(botonDescarga, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonQuitar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonDescarga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonQuitar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addGap(18, 18, 18)
                .addComponent(labelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            botonQuitar.setEnabled(true);
            try {
                buscarImagen();
            } catch (SQLException ex) {
                Logger.getLogger(DialogoImagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (JSONException ex) {
                Logger.getLogger(DialogoImagen.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DialogoImagen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            botonQuitar.setEnabled(false);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void botonQuitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonQuitarActionPerformed
        int mensaje = JOptionPane.showConfirmDialog(null,"¿Desea eliminar la imagen?", "Mensaje de confirmación", JOptionPane.YES_NO_OPTION);
        if(mensaje == JOptionPane.YES_OPTION){
            try {
                JSONObject _json = listaDocumentos.getJSONObject(jTable1.getSelectedRow());
                String path = _json.getString("path") + _json.getString("documento");
                controlador.quitarImagen(_json.getInt("iddocumento"), path);
                cargarTabla();
            } catch (JSONException ex) {}
        }
    }//GEN-LAST:event_botonQuitarActionPerformed

    private void botonDescargaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDescargaActionPerformed
        try {
            String cuil = controlador.form.getTextCuil().getText();
            String matricula = controlador.form.getLabelMatricula().getText();
            JSONObject config = controlador.getConfiguracion();
            GuardarImagenConFileChooser guardar = new GuardarImagenConFileChooser(Integer.valueOf(matricula), cuil, "", config.getJSONObject("configuracion").getString("pathpdf"));
            guardar.descargarImgParaIPSST(listaDocumentos);
        } catch (JSONException ex) {
            Logger.getLogger(DialogoImagen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_botonDescargaActionPerformed

    public void buscarImagen() throws SQLException, JSONException, IOException {
        boolean esImg = false;
        JSONObject _json = listaDocumentos.getJSONObject(jTable1.getSelectedRow());
        try {
            BufferedImage imagenInicial = ImageIO.read(new File(_json.getString("path") + _json.getString("documento")));
            ImageIcon iconoInicial = new ImageIcon(imagenInicial);
            labelImagen.setIcon(iconoInicial);
            ///////////////////////////
            Image originalImage = iconoInicial.getImage();
            int newWidth = 470;
            int newHeight = 500;
            Image resizedImage = originalImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            ImageIcon resizedIcon = new ImageIcon(resizedImage);
            labelImagen.setIcon(resizedIcon);
            esImg = true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (!esImg) {
            labelImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add.png")));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonDescarga;
    private javax.swing.JButton botonQuitar;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelImagen;
    // End of variables declaration//GEN-END:variables
}
